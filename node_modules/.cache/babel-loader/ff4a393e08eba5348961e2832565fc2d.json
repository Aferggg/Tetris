{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y = +y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"FnmTuto2zy8caDMApblDFl0SLAA=\");","map":{"version":3,"sources":["/Users/learnacademy/Desktop/tetris/tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","STAGE_WIDTH","TETROMINOS","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA2C,eAA3C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACjCQ,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAG;AAAZ,KAD4B;AAEjCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFQ;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CAApC;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAACL,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOG,IAAAA;AAAP,GAAD,KAAsB;AAC1CN,IAAAA,SAAS,CAACQ,IAAI,KAAK,EACf,GAAGA,IADY;AAEfP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGM,IAAI,CAACP,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGK,IAAI,CAACP,GAAL,CAASE,CAAT,GAAY,CAAEA;AAA1C,OAFU;AAGfG,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMG,WAAW,GAAGf,WAAW,CAAC,MAAM;AAClCM,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAEP,WAAW,GAAG,CAAd,GAAkB,CAAtB;AAAyBQ,QAAAA,CAAC,EAAC;AAA3B,OADC;AAENC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFvB;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACP,MAAD,EAASQ,eAAT,EAA0BE,WAA1B,CAAP;AACH,CAxBM;;GAAMX,S","sourcesContent":["import {useState, useCallback } from 'react';\nimport { STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino} from '../tetrominos';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y : 0},\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const updatePlayerPos = ({x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev, \n            pos: { x: (prev.pos.x += x), y: (prev.pos.y =+ y)},\n            collided, \n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: {x: STAGE_WIDTH / 2 - 2, y:0},\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer];\n}\n"]},"metadata":{},"sourceType":"module"}