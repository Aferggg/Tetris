{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const rotate = (matrix, dir) => {\n    // make the rows into columns (transpose)\n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse each row to get rotated  matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n  };\n\n  const playerRotate = (stage, direction) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n  };\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"fLMhHCpE3aBG4h7GXW107NhzfnM=\");","map":{"version":3,"sources":["/Users/learnacademy/Desktop/tetris/tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","direction","clonedPlayer","JSON","parse","stringify","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,WAAlB,QAAqC,OAArC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA2C,eAA3C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AACnCQ,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAET,UAAU,CAAC,CAAD,CAAV,CAAcU,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CAApC;;AAMA,QAAMC,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AACpC;AAEQ,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAcL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CAAzB,CAArB,CAH4B,CAK5B;;AACA,QAAIJ,GAAG,GAAG,CAAV,EAAa,OAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAGA,GAAG,CAACC,OAAJ,EAAvB,CAAP;AAChB,GAPD;;AASA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACvC,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAexB,MAAf,CAAX,CAArB;AACAqB,IAAAA,YAAY,CAAChB,SAAb,GAAyBG,MAAM,CAACa,YAAY,CAAChB,SAAd,EAAyBK,GAAzB,CAA/B;AACH,GAHD;;AAKA,QAAMe,eAAe,GAAG,CAAC;AAAEtB,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CN,IAAAA,SAAS,CAACyB,IAAI,KAAK,EACjB,GAAGA,IADc;AAEjBxB,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGuB,IAAI,CAACxB,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGsB,IAAI,CAACxB,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFY;AAGjBG,MAAAA;AAHiB,KAAL,CAAL,CAAT;AAKD,GAND;;AAQA,QAAMoB,WAAW,GAAGhC,WAAW,CAAC,MAAM;AACpCM,IAAAA,SAAS,CAAC;AACRC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEL,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BM,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAER,eAAe,GAAGS,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACP,MAAD,EAASyB,eAAT,EAA0BE,WAA1B,CAAP;AACD,CAtCI;;GAAM5B,S","sourcesContent":["import {useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino} from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n      pos: { x: 0, y: 0 },\n      tetromino: TETROMINOS[0].shape,\n      collided: false,\n    });\n  \n    const rotate = (matrix, dir) => {\n// make the rows into columns (transpose)\n\n        const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]),\n        );\n        //reverse each row to get rotated  matrix\n        if (dir > 0) return rotatedTetro.map(row=> row.reverse());\n    }\n\n    const playerRotate = (stage, direction) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    };\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n      setPlayer(prev => ({\n        ...prev,\n        pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n        collided,\n      }))\n    }\n  \n    const resetPlayer = useCallback(() => {\n      setPlayer({\n        pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n        tetromino: randomTetromino().shape,\n        collided: false,\n      })\n    }, [])\n  \n    return [player, updatePlayerPos, resetPlayer];\n  }"]},"metadata":{},"sourceType":"module"}