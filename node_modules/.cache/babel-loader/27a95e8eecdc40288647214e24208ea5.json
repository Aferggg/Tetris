{"ast":null,"code":"export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => new Array(STAGE_WIDTH).fill([0, 'clear']));\nexport const checkCollision = (player, stage, {\n  x: moveX,\n  y: moveY\n}) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      //1. check that we're on tetromino cell\n      if (player.tetromino[y][x] !== 0) {//2. check that movement is inside game height (y)\n        //shouldnt go through bottom of play area\n        // !stage[y + player.pos.y + moveY]\n        //3. check that tetromino not moving outside of game width (x)\n        //4. Check that cell isn't set to clear\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/learnacademy/Desktop/tetris/tetris/src/gameHelpers.js"],"names":["STAGE_WIDTH","STAGE_HEIGHT","createStage","Array","from","fill","checkCollision","player","stage","x","moveX","y","moveY","tetromino","length"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,EAApB;AACP,OAAO,MAAMC,YAAY,GAAG,EAArB;AAEP,OAAO,MAAMC,WAAW,GAAG,MACvBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC,MAC5B,IAAIE,KAAJ,CAAUH,WAAV,EAAuBK,IAAvB,CAA4B,CAAC,CAAD,EAAI,OAAJ,CAA5B,CADJ,CADG;AAKP,OAAO,MAAMC,cAAc,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgB;AAAEC,EAAAA,CAAC,EAAEC,KAAL;AAAYC,EAAAA,CAAC,EAAEC;AAAf,CAAhB,KAA0C;AACpE,OAAI,IAAID,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACJ,MAAM,CAACM,SAAP,CAAiBC,MAAlC,EAA0CH,CAAC,IAAG,CAA9C,EAAiD;AAC7C,SAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBG,MAArC,EAA6CL,CAAC,IAAI,CAAlD,EAAqD;AACjD;AACA,UAAGF,MAAM,CAACM,SAAP,CAAiBF,CAAjB,EAAoBF,CAApB,MAA2B,CAA9B,EAAiC,CAC7B;AACA;AACA;AAEA;AAEA;AACH;AACJ;AACJ;AACJ,CAfM","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => \n    Array.from(Array(STAGE_HEIGHT), () => \n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY}) => {\n    for(let y = 0; y<player.tetromino.length; y +=1) {\n        for(let x = 0; x<player.tetromino[y].length; x += 1) {\n            //1. check that we're on tetromino cell\n            if(player.tetromino[y][x] !== 0) {\n                //2. check that movement is inside game height (y)\n                //shouldnt go through bottom of play area\n                // !stage[y + player.pos.y + moveY]\n\n                //3. check that tetromino not moving outside of game width (x)\n\n                //4. Check that cell isn't set to clear\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}