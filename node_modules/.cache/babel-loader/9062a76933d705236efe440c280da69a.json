{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/tetris/tetris/src/components/Tetris.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers'; // styled components\n\nimport { StyledTetrisWrapper, StyledTetris } from './Styles/StyledTetris'; //custom hooks\n\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage'; //components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n  console.log('re-render');\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      // Game Over\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER!!!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Stage, {\n        stage: stage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Rows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Tetris, \"wgzQFTmop/k6/nKGpd9Ejy9aLZQ=\", true, function () {\n  return [usePlayer, useStage];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["/Users/learnacademy/Desktop/tetris/tetris/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","Stage","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","score","setScore","rows","setRows","level","setLevel","useGameStatus","rowsCleared","console","log","movePlayer","dir","x","y","startGame","drop","collided","pos","dropPlayer","move","keyCode","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers';\n// styled components\nimport { StyledTetrisWrapper, StyledTetris } from './Styles/StyledTetris';\n\n//custom hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\n\n\n//components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n  \n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage] = useStage(player, resetPlayer);\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n        rowsCleared\n      );\n    console.log('re-render');\n  \n    const movePlayer = dir => {\n      if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n        updatePlayerPos({ x: dir, y: 0 });\n      }\n    }\n  \n    const startGame = () => {\n      // Reset everything\n      setStage(createStage());\n      resetPlayer();\n      setGameOver(false);\n    }\n  \n    const drop = () => {\n      if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n        updatePlayerPos({ x: 0, y: 1, collided: false })\n      } else {\n        // Game Over\n        if (player.pos.y < 1) {\n          console.log(\"GAME OVER!!!\");\n          setGameOver(true);\n          setDropTime(null);\n        }\n        updatePlayerPos({ x: 0, y: 0, collided: true });\n      }\n    }\n  \n    const dropPlayer = () => {\n      drop();\n    }\n  \n    const move = ({ keyCode }) => {\n      if (!gameOver) {\n        if (keyCode === 37) {\n          movePlayer(-1);\n        } else if (keyCode === 39) {\n          movePlayer(1);\n        } else if (keyCode === 40) {\n          dropPlayer();\n        } else if (keyCode === 38) {\n          playerRotate(stage, 1);\n        }\n      }\n    }\n  \n    return (\n      <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)}>\n        <StyledTetris>\n          <Stage stage={stage} />\n          <aside>\n            {gameOver ? (\n              <Display gameOver={gameOver} text=\"Game Over\" />\n            ) : (\n              <div>\n                <Display text=\"Score\" />\n                <Display text=\"Rows\" />\n                <Display text=\"Level\" />\n              </div>\n            )}\n            <StartButton callback={startGame} />\n          </aside>\n        </StyledTetris>\n      </StyledTetrisWrapper>\n    );\n  };\n  \n  export default Tetris;\n  \n  "]},"metadata":{},"sourceType":"module"}